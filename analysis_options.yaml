# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
     avoid_print: false  # Uncomment to disable the `avoid_print` rule
     prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
     avoid_dynamic_calls: true
     constant_identifier_names: false
     prefer_const_constructors: true
     prefer_const_literals_to_create_immutables: true
     prefer_const_declarations: true
     always_declare_return_types: true
     always_put_required_named_parameters_first: true
     always_specify_types: true
     prefer_relative_imports: true
     avoid_bool_literals_in_conditional_expressions: true
     avoid_classes_with_only_static_members: true
     avoid_double_and_int_checks: true
     avoid_equals_and_hash_code_on_mutable_classes: true
     avoid_field_initializers_in_const_classes: true
     avoid_implementing_value_types: true
     avoid_js_rounded_ints: true
     avoid_positional_boolean_parameters: true
     avoid_redundant_argument_values: true
     avoid_type_to_string: true
     avoid_unused_constructor_parameters: true
     avoid_void_async: true
     cancel_subscriptions: true
     cascade_invocations: true
     cast_nullable_to_non_nullable: true
     close_sinks: true
     comment_references: true
     conditional_uri_does_not_exist: true
     directives_ordering: true
     discarded_futures: true
     eol_at_end_of_file: true
     library_names: true
     lines_longer_than_80_chars: true
     literal_only_boolean_expressions: true
     matching_super_parameters: true
     no_literal_bool_comparisons: true
     no_runtimeType_toString: true
     no_self_assignments: true
     noop_primitive_operations: true
     one_member_abstracts: true
     package_prefixed_library_names: true
     parameter_assignments: true
     prefer_asserts_with_message: true
     prefer_constructors_over_static_methods: true
     prefer_expression_function_bodies: true
     prefer_final_in_for_each: true
     prefer_final_locals: true
     prefer_final_parameters: true
     prefer_if_elements_to_conditional_expressions: true
     prefer_mixin: true
     prefer_null_aware_method_calls: true
     prefer_void_to_null: true
     require_trailing_commas: true
     sized_box_shrink_expand: true
     sort_unnamed_constructors_first: true
     test_types_in_equals: true
     throw_in_finally: true
     tighten_type_of_initializing_formals: true
     type_annotate_public_apis: true
     unawaited_futures: true
     unnecessary_await_in_return: true
     unnecessary_breaks: true
     unnecessary_lambdas: true
     unnecessary_null_aware_operator_on_extension_on_nullable: true
     unnecessary_parenthesis: true
     unnecessary_statements: true
     unreachable_from_main: true
     use_colored_box: true
     use_decorated_box: true
     use_enums: true
     use_if_null_to_convert_nulls_to_bools: true
     use_is_even_rather_than_modulo: true
     use_named_constants: true
     use_raw_strings: true
     use_string_buffers: true




# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
analyzer:
  plugins:
    - custom_lint